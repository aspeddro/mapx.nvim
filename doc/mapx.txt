*mapx.txt*  Make mapping more manageable.                          *mapx* *mapx.nvim*

Author:         Maddison Hellstrom <https://github.com/b0o/>
Licence:        MIT
Homepage:       https://github.com/b0o/mapx.nvim
Version:        0.2.1

==============================================================================
CONTENTS                                                         *mapx-contents*

    1. Intro ................................ |mapx-intro|
    2. Setup ................................ |mapx-setup|
      2.1. Configuration .................... |mapx-config|
      2.2. Which-Key Support ................ |mapx-whichkey-support|
    3. API .................................. |mapx-api|
      3.1. Map Functions .................... |mapx-map-functions|
      3.2. Map Options ...................... |mapx-map-options|
      3.3. Map Groups ....................... |mapx-map-groups|
      3.4. WhichKey Names ................... |mapx-whichkey-names|
      3.5. Buffer-local Maps ................ |mapx-buffer-maps|
      3.6. Lua Function Maps ................ |mapx-lua-maps|
      3.7. Commands ......................... |mapx-commands|
    4. Examples ............................. |mapx-examples|
    5. Auto-Conversion ...................... |mapx-convert|
    6. Changelog ............................ |mapx-changelog|
    7. License .............................. |mapx-license|

==============================================================================
1. Intro                                                            *mapx-intro*

Mapx.nvim provides Lua helper functions that mimic Vim's |:map| and |:command|
family of commands. It aims to make configuring key bindings and commands from
within Lua more ergonomic.

==============================================================================
2. Setup                                                            *mapx-setup*

The `setup()` function can be used to configure Mapx:

  mapx.setup({config})                                            *mapx.setup()*
    `setup()` takes a `config` argument (see |mapx-config|) and returns the
    Mapx module. Subsequent calls to `setup()` have no effect but still return
    the Mapx module.

------------------------------------------------------------------------------
2.1 Configuration                                                  *mapx-config*

Mapx can be configured to behave in various ways. The default configuration
is:
>
  {
    global = false,
    whichkey = false,
  }
<
  Key              Type          Default
  global          boolean|string false                      *mapx-config-global*
    If `true`, the Mapx map functions will be attached to the global scope so
    that they can be called directly.

    If there is a global name collision, globalization will be aborted unless
    the value of `global` is `"force"`, in which case the global value will be
    overridden, or `"skip"`, in which case the conflicting functions will be
    skipped silently.

    Note that `global = true` does not bind the |mapx-map-options| variables
    or the |mapx-whichkey-names| functions to the global scope.

  whichkey         boolean       false                    *mapx-config-whichkey*
    If `true`, support for labeling keybindings with `which-key.nvim` is enabled.
    See |mapx-whichkey-support|.

  debug            boolean       false                       *mapx-config-debug*
    Display debug messages in the preview window.

------------------------------------------------------------------------------
2.2 Which-Key Support                                    *mapx-whichkey-support*

Mapx optionally supports integration with the which-key.nvim plugin, which can
be found at https://github.com/folke/which-key.nvim.

To enable this integration, ensure that `which-key` is installed and that
|mapx-config-whichkey| is enabled.

Once enabled, any |mapx-map-functions| can receive a final string argument to
add a label the the mapping which will be shown by `which-key.nvim` (see
|mapx-signature|).

Alternatively, use the |mapx-opt-label| map option:
>
  mapx.map("<leader>dtt", ":DoTheThing()<cr>", { label = "Do the thing", silent = true })
<
==============================================================================
3. API                                                                *mapx-api*

All |mapx-map-functions| have the signature:                      *mapx-signature*
>
    {lhs}, {rhs}[, ...{opts}[, {whichkey-label}]]
<
                                                            *mapx-signature-lhs*
The `{lhs}` argument can be a list-like table containing multiple `{lhs}`
strings, allowing you to map multiple key combinations to the same action.

                                                           *mapx-signature-opts*
`...{opts}` can be 0 or more |mapx-map-options|. All of the `{opts}` arguments
will be merged.

                                                       *mapx-signature-whichkey*
If |mapx-whichkey-support| is enabled, the final argument can be a string that
labels the keybinding with which-key.nvim. The label can't be a string that
conflicts with |mapx-option-strings|. If a label is present, the mapping is
delegated to which-key rather than being set up directly with |nvim_set_keymap()|.

------------------------------------------------------------------------------
3.1 Map Functions                                          *mapx-map-functions*

Mapx provides a function corresponding to each of vim's |:map| functions. All
map functions have the same signature, see |mapx-signature|.

  mapx.map(...)                                                     *mapx.map()*
  mapx.nmap(...)                                                   *mapx.nmap()*
  mapx.vmap(...)                                                   *mapx.vmap()*
  mapx.xmap(...)                                                   *mapx.xmap()*
  mapx.smap(...)                                                   *mapx.smap()*
  mapx.omap(...)                                                   *mapx.omap()*
  mapx.imap(...)                                                   *mapx.imap()*
  mapx.lmap(...)                                                   *mapx.lmap()*
  mapx.cmap(...)                                                   *mapx.cmap()*
  mapx.tmap(...)                                                   *mapx.tmap()*

`noremap` variants are also available. These functions are the same as their
normal counterpart above but they merge `{opts}` with `{ noremap = true }`:

  mapx.noremap(...)                                             *mapx.noremap()*
  mapx.nnoremap(...)                                           *mapx.nnoremap()*
  mapx.vnoremap(...)                                           *mapx.vnoremap()*
  mapx.xnoremap(...)                                           *mapx.xnoremap()*
  mapx.snoremap(...)                                           *mapx.snoremap()*
  mapx.onoremap(...)                                           *mapx.onoremap()*
  mapx.inoremap(...)                                           *mapx.inoremap()*
  mapx.lnoremap(...)                                           *mapx.lnoremap()*
  mapx.cnoremap(...)                                           *mapx.cnoremap()*
  mapx.tnoremap(...)                                           *mapx.tnoremap()*

Mapx also offers "bang" (|:map!| and |:noremap!|) variants:              *mapx-bang*

  mapx.mapbang(...)                                             *mapx.mapbang()*
  mapx.noremapbang(...)                                     *mapx.noremapbang()*

------------------------------------------------------------------------------
3.2 Map Options                                               *mapx-map-options*

The Mapx map functions accept all of the same options as |nvim_set_keymap()|
as well as Mapx-specific options. Mapx-specific options include:

  Option           Type          Default
  buffer          boolean|number nil                           *mapx-opt-buffer*
    If true or the number 0, the map is local to the current buffer.
    If >0, the map is local to the buffer with that number.

  filetype         string|table  nil                         *mapx-opt-filetype*
    If a string, the mapping only applies to buffers with a matching filetype.
    If a list-like table, the mapping applies to all of the listed filetypes.
    The shorthand key `ft` can be used for this option.
    Filetype mappings are applied via a |FileType| autocommand.
    Implies `{ buffer = 0 }`

  label            string        nil                            *mapx-opt-label*
    Sets the which-key label. See |mapx-whichkey-support|.

For your convenience, Mapx exports the following:             *mapx-option-vars*

  Variable      Lua value              String
  buffer        `{ buffer = 0 }`         `"buffer"`                    *mapx.buffer*
  nowait        `{ nowait = true }`      `"nowait"`                    *mapx.nowait*
  silent        `{ silent = true }`      `"silent"`                    *mapx.silent*
  script        `{ script = true }`      `"script"`                    *mapx.script*
  expr          `{ expr   = true }`      `"expr"`                        *mapx.expr*
  unique        `{ unique = true }`      `"unique"`                    *mapx.unique*

These variables are intended to be passed as individual `{opts}` arguments to
reduce boilerplate in your config. For example:
>
  mapx.inoremap(
    [[<m.expr>]],
    [[<Tab> pumvisible() ? "\<C-n>" : "\<Tab>"]],
    mapx.silent,
    mapx.expr
  )
<
Note that you don't need to use these variables, you are free to pass your own
`{opts}` table(s):
>
  mapx.inoremap(
    [[<m.expr>]],
    [[<Tab> pumvisible() ? "\<C-n>" : "\<Tab>"]],
    { silent = true, expr = true }
  )
<
Alternatively, you can simply pass strings as options:     *mapx-option-strings*
>
  mapx.inoremap(
    [[<m.expr>]],
    [[<Tab> pumvisible() ? "\<C-n>" : "\<Tab>"]],
    "silent",
    "expr"
  )
<
Strings can optionally be wrapped with <angle brackets>:
>
  mapx.inoremap(
    [[<m.expr>]],
    [[<Tab> pumvisible() ? "\<C-n>" : "\<Tab>"]],
    "<silent>",
    "<expr>"
  )
<

See |:map-arguments| and |nvim_set_keymap()| for more information on map options.

------------------------------------------------------------------------------
3.3 Map Groups                                                 *mapx-map-groups*

Mappings with shared |mapx-map-options| can be grouped with the `group`
function:
>
  mapx.group(...{opts}, {group-fn})                               *mapx.group()*
<
The `...{opts}` argument(s) are exactly as described in |mapx-signature-opts|,
except that |whichkey-opt-label| opts are not allowed.

The `{group-fn}` argument is a Lua function that will be called immediately to
set up any Mapx maps defined within it.

Within a group, all options set on the group will be set on maps created
within the group. Options set on individual maps within a group are merged
with the group opts, with the map's opts taking precedence over the group opts
when conflicting.

Groups can be nested; nested groups' opts are merged with their parent group's
opts, with the nested group's opts taking precedence over the enclosing group's
opts when conflicting.

Map groups are especially useful for |mapx-opt-filetype| maps.

For example, A and B are equivalent:
>
  -- A. Without grouping:
  nnoremap("<tab>",   [[:call search('\(\w\+(\w\+)\)', 's')<Cr>]],  "silent", { ft = "man" })
  nnoremap("<S-tab>", [[:call search('\(\w\+(\w\+)\)', 'sb')<Cr>]], "silent", { ft = "man" })

  -- B. With grouping:
  mapx.group("silent", { ft = "man" }, function()
    nnoremap("<tab>",   [[:call search('\(\w\+(\w\+)\)', 's')<Cr>]])
    nnoremap("<S-tab>", [[:call search('\(\w\+(\w\+)\)', 'sb')<Cr>]])
  end)
<

------------------------------------------------------------------------------
3.4 WhichKey Names                                         *mapx-whichkey-names*

You may have multiple mappings that share a common beginning sequence of keys,
for example `<leader>ga` and `<leader>gc`. In this case, when you press
`<leader>` and wait for the WhichKey popup, it will show an entry like
`g -> +prefix`; if you want a more descriptive name than `prefix`, you can
assign a name to it with the Mapx name functions. For example:
>
  mapx.name("<leader>g", "Git").
<
Now when WhichKey is triggered for `<leader>`, it will show `g -> +Git`

Note that if a real mapping exists for `{lhs}`, this will have no noticeable
effect.

There is a name function corresponding to each mode:

  mapx.name(...)                                                   *mapx.name()*
  mapx.nname(...)                                                 *mapx.nname()*
  mapx.vname(...)                                                 *mapx.vname()*
  mapx.xname(...)                                                 *mapx.xname()*
  mapx.sname(...)                                                 *mapx.sname()*
  mapx.oname(...)                                                 *mapx.oname()*
  mapx.iname(...)                                                 *mapx.iname()*
  mapx.lname(...)                                                 *mapx.lname()*
  mapx.cname(...)                                                 *mapx.cname()*
  mapx.tname(...)                                                 *mapx.tname()*
  mapx.namebang(...)                                           *mapx.namebang()*

Each name function has the signature:
>
    {lhs}, {name}[, ...{opts}]
<
The `{opts}` argument accepts a subset of the |mapx-map-opts| options:

  buffer    |mapx-opt-buffer|
  filetype  |mapx-opt-filetype|

Note that the name functions are not added to the global scope with
|mapx-config-global|.

------------------------------------------------------------------------------
3.5 Buffer-local Maps                                         *mapx-buffer-maps*

Unlike the builtin |nvim_set_keymap()| API, you are able to create
buffer-local maps by passing `{ buffer = true }` as an option to the Mapx map
functions.

If the `buffer` option is `true`, Mapx will use the |nvim_buf_set_keymap()|
function, with a value of `0` (current buffer) for `{buffer}`.

To create the map on a specific buffer, set `buffer` to the buffer's |bufnr|:
>
  mapx.nnoremap("J", "5j", { buffer = 2 })
<
------------------------------------------------------------------------------
3.6 Lua Function Maps                                            *mapx-lua-maps*

Mapx supports Lua functions as the `{rhs}` of a map. The function will be
called with a single argument, the value of vim's |v:count| special variable.

In a |:map-<expr>|, the function's return value will become the ultimate `{rhs}`.

------------------------------------------------------------------------------
3.7 Commands                                                     *mapx-commands*

Mapx provides a way to create commands with the cmd and cmdbang functions.
The cmd function

  mapx.cmd({name}, {fun}, {...})                                *mapx.cmd()*
  mapx.cmdbang({name}, {fun}, {...})                            *mapx.cmdbang()*

The {name} argument is the name of the command.

The {fun} arguemnt is a Vim command string or Lua function or
table of functions.

If using Lua, the function(s) will be passed a single argument as table
of all the options the user passed to the command such as arguments,
modifiers and the bang.
Each of the options can be nil depending on if the user passed the option or
if the command supports the option.
The options `arguments` and `modifiers` are never nil and are empty tables
if the user passes none.
Note that the range and count options are mutually exclusive because the
commands in Vim can't accept both at the same time.

The possible keys and values of options are:

 - `arguments`: table - arguments passed through the command line which are
                      evaluated once using the Lua `load` function

 - `modifiers`: table - modifiers passed through the command line such as
                      `vertical` and `rightbelow`

 - `register`: string - if the command was not created with the `-register`
                      attribute then this is always nil, otherwise it is the
                      name of the register the user passed to the command and
                      an empty string if the user did not pass a register to
                      the command

 - `range`: table     - if the command was not created with the `-range` attribute
                      then this is always nil, otherwise if the user selected a
                      range of lines the keys "first" and "last" will contain
                      the numbers of first and last line of the range, else if
                      the user passed a line number on the command line the key
                      "line" will be set to the number of the line, else the
                      range will be an empty object

 - `count`: number    - if the command was not created with the `-count` attribute
                      or if the user did not pass a count on the command line
                      than this is nil, otherwise this is  the number the user
                      passed to the command on the commandline

 - `bang`: boolean    - if the command was not created with the `-bang` attribute
                      then this is always nil, otherwise if the user passed the
                      bang on the command line then this will be true, and if
                      the user executed this command without the bang, this will
                      be false

The {...} argument is a table of Vim command attributes such as `-nargs` and
`-complete`.
Attributes such as `-bang` just have to be set to true, while attributes such
as `-nargs` and `-complete` take string arguments.
Note that the `-range` and `-count` attributes are mutually exclusive because the
commands in Vim can't accept both at the same time.

See the result of `:help :command` for more information.

==============================================================================
4. Examples                                                      *mapx-examples*

Basic usage:
>
  local mapx = require'mapx'.setup{}

  mapx.map([[<C-z>]], [[<Nop>]])
  mapx.mapbang([[<C-z>]], [[<Nop>]])

  mapx.nnoremap([[j]], [[v:count ? 'j' : 'gj']], m.expr)
  mapx.nnoremap([[k]], [[v:count ? 'k' : 'gk']], "expr")

  mapx.nmap([[J]], [[5j]])
  mapx.nmap([[K]], [[5k]])
<

With |mapx-config-global| enabled:
>
  local m = require'mapx'.setup{ global = true }

  map([[<C-z>]], [[<Nop>]])
  mapbang([[<C-z>]], [[<Nop>]])

  nnoremap([[j]], [[v:count ? 'j' : 'gj']], "expr")
  nnoremap([[k]], [[v:count ? 'k' : 'gk']], "expr")

  nmap([[J]], [[5j]])
  nmap([[K]], [[5k]])

  inoremap([[<Tab>]], [[pumvisible() ? "\<C-n>" : "\<Tab>"]], m.silent, m.expr)
  inoremap([[<S-Tab>]], [[pumvisible() ? "\<C-p>" : "\<S-Tab>"]], m.silent, m.expr)
<

With multiple `{lhs}`'s:
>
  local m = require'mapx'.setup{}
  m.nnoremap({[[<C-f>f]], [[<C-f><C-f>]]}, [[:lua require('telescope.builtin').find_files({previewer = false})<Cr>]], m.silent)
<

With |mapx-config-whichkey| support enabled:
>
  local m = require'mapx'.setup{ whichkey = true }
  m.vnoremap([[<leader>y]], [["+y]], "Yank to system clipboard")
  m.nnoremap([[<leader>Y]], [["+yg_]], "Yank until EOL to system clipboard")
  m.nnoremap([[<leader>yy]], [["+yy]], "Yank line to system clipboard")
<

Commands:
>
  local m = require'mapx'.setup{}
  m.cmd("LspDiag",
    function() vim.lsp.diagnostic.set_loclist() end,
    {nargs = 0})
  m.cmdbang("LspAddFolder",
    function(opt) vim.lsp.buf.add_workspace_folder(opt.arguments[1]) end,
    {nargs = 1, complete = 'file'})
  m.cmdbang("LspRemFolder",
    function(opt) vim.lsp.buf.remove_workspace_folder(opt.arguments[1]) end,
    {nargs = 1, complete = 'file'})
<
==============================================================================
5. Auto-Conversion                                                *mapx-convert*

Mapx provides a facility to convert mappings that use Neovim's
`vim.api.nvim_set_keymap()`/`vim.api.nvim_buf_set_keymap()` functions to Mapx
functions.

To use the converter, copy your mappings (ideally without any other config)
into a new Lua file and run the converter script located at `/scripts/convert`
within the Mapx project directory.

For example, if the file containing your mappings is at `/tmp/maps.lua`:
The conversion result will be written to stdout:

>
  /path/to/mapx.nvim/scripts/convert /tmp/maps.lua
<

If you installed Mapx via Packer, the convert script is likely located at
`$HOME/.local/share/nvim/site/pack/packer/start/mapx.nvim/scripts/convert`.

You can provide a configuration table via the `-c` flag. For example:

>
  /path/to/mapx.nvim/scripts/convert -c '{ global = true, optStyle = "string" }'` /tmp/maps.lua
<

Note that the output will not include any comments, formatting, or any code other
than calls to `vim.api.nvim_set_keymap()`/`vim.api.nvim_buf_set_keymap()`.

------------------------------------------------------------------------------
5.1 Configuration                                          *mapx-convert-config*

  convert.setup({config})                                      *convert.setup()*
    `setup()` takes a `config` argument (see |mapx-convert-config-opts|) and
    returns the Mapx convert module.

Mapx's convert config can contain the following keys:

  Key              Type          Default
  config           table         {}                 *mapx-convert-config-global*
    A config table which will be passed to |mapx.setup()|.
    The converter respects the `config.global` option and will output global
    maps if it's `true`.
    See |mapx-config|.

  importName       string        "mapx"         *mapx-convert-config-importName*
    The name of the variable that Mapx will be assigned to in the converted
    output.

  quotes           table         See below          *mapx-convert-config-quotes*
    The types of quotes to use when quoting arguments to Mapx functions,
    in order of preference.

    This is a list-like table of (string, string) tuples, where the tuple
    represents (left-quote, right-quote) pairs.

    The first quote type that doesn't require escaping quotes within the
    quoted string will be used.

    The default value is:
>
      quotes = {
        { "'", "'" },
        { '"', '"' },
        { "[[", "]]" },
      }
<
  optStyle         string        "string"         *mapx-convert-config-optStyle*
    The style of |mapx-map-options| to use. Valid values:

      "string"     |mapx-option-strings|
      "vim"        |mapx-option-strings| with <angle brackets>
      "var"        |mapx-option-vars|
      "table"      Options in table format.

  out              string        See below             *mapx-convert-config-out*
    How to output the conversion output. This option should not be used with
    the conversion script, only if you are calling the `mapx.convert.lua`
    module directly. Valid values:

      "preview"    Output to the preview window.
      "print"      Output with Lua's `print()` function.
      "capture"    Append to the `convert.captured` table

    The default value for the module is "preview".
    The default value for the conversion script is "print".

  passthrough      boolean       false         *mapx-convert-config-passthrough*
    If true, `nvim's vim.api.nvim_set_keymap()`/`vim.api.nvim_buf_set_keymap()`
    will still be called.

==============================================================================
6. Changelog                                                    *mapx-changelog*

10 Sep 2021                                                             v0.2.1
   Renamed project to Mapx.nvim
   Added tests
   Added |mapx-convert| tool
   Fixed bugs

08 Sep 2021                                                             v0.2.0
   Breaking: Deprecated config.quiet in favor of `setup({global = "force"})`
             or `setup({global = "skip"})`

08 Sep 2021                                                             v0.1.2
   Added support for |mapx-whichkey-names|
   Allow wrapping string opts in <angle brackets>
   Refactored code
   Bug fixes

04 Sep 2021                                                             v0.1.1
   Added |mapx.group()|
   Added debug logging with |mapx-config-debug|
   Added support for |mapx-opt-filetype| maps
   Added support for Lua functions as a map's `{rhs}`
   Added |mapx-config-quiet|
   Fixed bugs

01 Sep 2021                                                             v0.1.0
   Added |mapx.setup()|
   Added |mapx-whichkey-support|
   Breaking: Deprecated `mapx.globalize()` in favor of `setup({global = true})`

28 Aug 2021                                                               v0.0.2
  Added |mapx.globalize()|

27 Aug 2021                                                             v0.0.1
  Initial Release

==============================================================================
7. License                                                        *mapx-license*
>
  MIT License

  Copyright © 2021 Maddison Hellstrom <github.com/b0o>

  Permission is hereby granted, free of charge, to any person obtaining a copy
  of this software and associated documentation files (the “Software”), to deal
  in the Software without restriction, including without limitation the rights
  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  copies of the Software, and to permit persons to whom the Software is
  furnished to do so, subject to the following conditions:

  The above copyright notice and this permission notice shall be included in all
  copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  SOFTWARE.
<
 vim:tw=78:ts=8:ft=help:norl:
